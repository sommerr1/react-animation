import React, { useRef } from 'react';

interface TexturePanelProps {
  selectedColor: string | null;
  setSelectedColor: (color: string | null) => void;
  uploadedTexture: string | null;
  setUploadedTexture: (texture: string | null) => void;
}

export default function TexturePanel({ 
  selectedColor, 
  setSelectedColor, 
  uploadedTexture, 
  setUploadedTexture 
}: TexturePanelProps) {
  const fileInputRef = useRef<HTMLInputElement>(null);

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
  const presetColors = [
    { name: '–ë–µ–ª—ã–π', color: '#FFFFFF' },
    { name: '–ß–µ—Ä–Ω—ã–π', color: '#000000' },
    { name: '–ö—Ä–∞—Å–Ω—ã–π', color: '#FF0000' },
    { name: '–¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π', color: '#000080' },
    { name: '–¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π', color: '#006400' },
    { name: '–ñ–µ–ª—Ç—ã–π', color: '#FFFF00' },
    { name: '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π', color: '#8B4513' },
    { name: '–†–æ–∑–æ–≤—ã–π', color: '#FF69B4' },
    { name: '–û—Ä–∞–Ω–∂–µ–≤—ã–π', color: '#FFA500' },
    { name: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', color: '#800080' },
    { name: '–ì–æ–ª—É–±–æ–π', color: '#00BFFF' },
    { name: '–õ–∞–π–º', color: '#32CD32' },
    { name: '–ó–æ–ª–æ—Ç–æ–π', color: '#FFD700' },
    { name: '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π', color: '#C0C0C0' },
    { name: '–ë–æ—Ä–¥–æ–≤—ã–π', color: '#800020' },
    { name: '–ë–∏—Ä—é–∑–æ–≤—ã–π', color: '#40E0D0' },
    { name: '–õ–∞–≤–∞–Ω–¥–æ–≤—ã–π', color: '#E6E6FA' },
    { name: '–ö–æ—Ä–∞–ª–ª–æ–≤—ã–π', color: '#FF7F50' },
    { name: '–ú—è—Ç–Ω—ã–π', color: '#98FB98' },
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã
  const handleTextureUpload = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result as string;
        setUploadedTexture(result);
        setSelectedColor(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
      };
      reader.readAsDataURL(file);
    }
  };

  // CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
  const scrollbarStyles = `
    .color-scroll::-webkit-scrollbar {
      height: 6px;
    }
    .color-scroll::-webkit-scrollbar-track {
      background: rgba(255,255,255,0.1);
      border-radius: 3px;
    }
    .color-scroll::-webkit-scrollbar-thumb {
      background: #4a90e2;
      border-radius: 3px;
    }
    .color-scroll::-webkit-scrollbar-thumb:hover {
      background: #357abd;
    }
  `;

  return (
    <div
      style={{
        background: 'rgba(255, 255, 255, 0.1)',
        backdropFilter: 'blur(10px)',
        padding: '15px',
        borderRadius: '10px',
        color: 'white',
        marginTop: '10px',
      }}
    >
      <style>{scrollbarStyles}</style>
      
      <h3 style={{ margin: '0 0 15px 0', fontSize: '1.2rem' }}>
        üé® –¢–µ–∫—Å—Ç—É—Ä—ã
      </h3>
      
      {/* –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ */}
      <div style={{ marginBottom: '15px' }}>
        <div 
          className="color-scroll"
          style={{ 
            display: 'flex', 
            gap: '8px', 
            overflowX: 'auto', 
            padding: '10px 0',
            scrollbarWidth: 'thin',
            scrollbarColor: '#4a90e2 #333',
            width: '100%',
            maxWidth: '232px' // 4 —Ü–≤–µ—Ç–∞ * 50px + 3 –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ * 8px + –æ—Ç—Å—Ç—É–ø—ã = 232px
          }}>
          {presetColors.map((colorItem, index) => (
            <div
              key={index}
              onClick={() => {
                setSelectedColor(colorItem.color);
                setUploadedTexture(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞
              }}
              style={{
                minWidth: '50px',
                width: '50px',
                height: '50px',
                borderRadius: '50%',
                border: '3px solid',
                borderColor: selectedColor === colorItem.color ? '#4a90e2' : 'rgba(255,255,255,0.3)',
                background: colorItem.color,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                position: 'relative',
                boxShadow: selectedColor === colorItem.color ? '0 0 15px rgba(74, 144, 226, 0.6)' : '0 2px 8px rgba(0,0,0,0.3)',
                transform: selectedColor === colorItem.color ? 'scale(1.1)' : 'scale(1)',
                flexShrink: 0 // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∂–∞—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–µ
              }}
              title={colorItem.name}
            >
              {selectedColor === colorItem.color && (
                <div style={{
                  position: 'absolute',
                  top: '-3px',
                  right: '-3px',
                  width: '18px',
                  height: '18px',
                  borderRadius: '50%',
                  background: '#4a90e2',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '10px',
                  color: 'white'
                }}>
                  ‚úì
                </div>
              )}
            </div>
          ))}
        </div>
        <div style={{ 
          marginTop: '8px', 
          fontSize: '0.7rem', 
          color: 'rgba(255,255,255,0.7)',
          textAlign: 'center'
        }}>
          –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        </div>
      </div>

      {/* –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã */}
      <div style={{ marginBottom: '15px' }}>
        <button
          onClick={handleTextureUpload}
          style={{
            padding: '8px 15px',
            fontSize: '0.9rem',
            borderRadius: '5px',
            border: 'none',
            background: '#ff9a56',
            color: 'white',
            cursor: 'pointer',
            width: '100%',
            transition: 'background 0.2s',
          }}
        >
          üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é
        </button>
      </div>

      {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
    </div>
  );
}
